/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package myDemoApp;
import java.util.ArrayList;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App {

    //Search two strings in an arraylist 
    //return true if both of them appear in the arraylist 
    //else return false
    public static boolean searchString(ArrayList<String> array, String firstString, String secondString) {

        boolean isFirstPresent = false;
        boolean isSecondPresent = false;

        if (array == null) return false;

        for (String arrayElement : array){
            if(firstString != null){
              if (arrayElement.contains(firstString)){
                isFirstPresent = true;
              }
            }
            
            if(secondString != null){
              if (arrayElement.contains(secondString)){
                isSecondPresent = true;
              }
            }
        }

        if(isFirstPresent == true && isSecondPresent == true){
            return true;
        }else{
            return false;
        }
    }

    public String getGreeting() {
        return "Hello world.";
    }

    public static boolean search(ArrayList<Integer> array, int e) {
      System.out.println("inside search");
      if (array == null) return false;

      for (int elt : array) {
        if (elt == e) return true;
      }
      return false;
    }


    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {

          //First, user will fill the arraylist in which given words will be search for
          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<String> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            String value = (sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);

          //Then, two strings will be taken as a form of arraylist
          String input2 = req.queryParams("input2");
          java.util.Scanner sc2 = new java.util.Scanner(input2);
          sc2.useDelimiter("[;\r\n]+");
          java.util.ArrayList<String> StringsToSearch = new java.util.ArrayList<>();
          while (sc2.hasNext())
          {
            String value = (sc2.next().replaceAll("\\s",""));
            StringsToSearch.add(value);
          }
          sc2.close();
          System.out.println(StringsToSearch);

          boolean result = false;
          
          //since arraylist.get doesn't return null if a given index is empty,
          //catching the error and placing a null value 
          //this allows us to send a value to the method even if that value is null
          System.out.println("1");
          try {
            String String1 = StringsToSearch.get(0);
          } catch (IndexOutOfBoundsException e) {
            StringsToSearch.add(0, null);
          }

          System.out.println("2");

          try {
            String String2 = StringsToSearch.get(1);
          } catch (IndexOutOfBoundsException e) {
            StringsToSearch.add(1, null);
          }

          System.out.println("3");

          if(StringsToSearch.get(0) == null && StringsToSearch.get(1) == null){
            System.out.println("4");
            result = App.searchString(inputList, null, null);
          }
          else if(StringsToSearch.get(0) == null && StringsToSearch.get(1) != null){
            System.out.println("5");
            String String2 = StringsToSearch.get(1);
            result = App.searchString(inputList, null, String2);
          }
          else if(StringsToSearch.get(0) != null && StringsToSearch.get(1) == null){
            System.out.println("6");
            String String1 = StringsToSearch.get(0);
            result = App.searchString(inputList, String1, null);
          }
          else{
            System.out.println("7");
            String String1 = StringsToSearch.get(0);
            String String2 = StringsToSearch.get(1);
            result = App.searchString(inputList, String1, String2);
          }

          System.out.println("8");
          Map<String, Boolean> map = new HashMap<String, Boolean>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }

}
